name: Release Nightly

on:
  # Run nightly
  schedule:
    - cron: "0 0 * * *"

  # Allow for manual dispatch on GitHub
  workflow_dispatch:

jobs:
  create-nightly-release:
    name: Create Nightly Release
    runs-on: ubuntu-24.04
    outputs:
      is_active: ${{ steps.activity.outputs.is_active }}
      date: ${{ steps.current_time_underscores.outputs.formattedTime }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      package_prefix: ruffle-nightly-${{ steps.current_time_underscores.outputs.formattedTime }}
      tag_name: nightly-${{ steps.current_time_dashes.outputs.formattedTime }}

    # Only run the scheduled workflows on the main repo.
    if: github.repository == 'ruffle-rs/ruffle' || github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Check for repo activity
        id: activity
        run: |
          # Skip activity check when manually triggered.
          if [ "${{ github.event_name }}" == "repository_dispatch" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            is_active=true
          elif [ "$(git rev-list --after="24 hours" ${{ github.sha }})" ]; then
            is_active=true
          else
            is_active=false
          fi
          echo "is_active=$is_active" >> $GITHUB_OUTPUT

      - name: Get current time with dashes
        uses: 1466587594/get-current-time@v2.1.2
        id: current_time_dashes
        with:
          format: YYYY-MM-DD

      - name: Get current time with underscores
        uses: 1466587594/get-current-time@v2.1.2
        id: current_time_underscores
        with:
          format: YYYY_MM_DD

      - name: Create release
        if: steps.activity.outputs.is_active == 'true'
        id: create_release
        run: |
          tag_name="nightly-${{ steps.current_time_dashes.outputs.formattedTime }}"
          release_name="Nightly ${{ steps.current_time_dashes.outputs.formattedTime }}"
          gh release create "$tag_name" --title "$release_name" --generate-notes --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build ${{ matrix.build_name }}
    needs: create-nightly-release
    if: needs.create-nightly-release.outputs.is_active == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - build_name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            RUSTFLAGS: -Ctarget-feature=+crt-static
            MSI_ARCH: x64

    env:
      PACKAGE_FILE: ${{ needs.create-nightly-release.outputs.package_prefix }}-${{ matrix.build_name }}.${{ startsWith(matrix.build_name, 'win') && 'zip' || 'tar.gz' }}
      CARGO_BUILD_DIR: target/${{ matrix.target }}/release

    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone Ruffle repo
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt install -y libasound2-dev libxcb-shape0-dev libxcb-xfixes0-dev libgtk-3-dev libudev-dev

      - name: Install WiX
        run: |
          dotnet tool install --global wix
          wix extension add -g WixToolset.UI.wixext
          wix extension add -g WixToolset.Util.wixext
        if: runner.os == 'Windows'

      - name: Cargo build
        run: cargo build --locked --package exporter --release ${{matrix.DESKTOP_FEATURES && '--features' }} ${{matrix.DESKTOP_FEATURES}} ${{ matrix.target && '--target' }} ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.MACOSX_DEPLOYMENT_TARGET }}

      - name: Package common
        run: |
          mkdir package
          cp README.md package/README.md
          cp LICENSE.md package/LICENSE.md

      - name: Package MSI
        run: |
          cd desktop/packages/windows/wix
          wix build ruffle.wxs -ext WixToolset.UI.wixext -ext WixToolset.Util.wixext -arch ${{ matrix.MSI_ARCH }} -o ../../../../package/setup.msi -pdbtype none
        env:
          RUFFLE_VERSION: "0.1.0"
          CARGO_BUILD_DIR: ../../../../target/${{ matrix.target }}/release
        if: runner.os == 'Windows'

      - name: Package Windows
        if: runner.os == 'Windows'
        run: |
          cp ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop.exe package/ruffle.exe
          7z a ${{ env.PACKAGE_FILE }} ./package/*

      - name: Package Linux
        if: runner.os == 'Linux'
        run: |
          cp ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop package/ruffle

          # Package extras
          mkdir -p package/extras
          cp desktop/packages/linux/rs.ruffle.Ruffle.desktop package/extras
          cp desktop/packages/linux/rs.ruffle.Ruffle.metainfo.xml package/extras
          cp desktop/packages/linux/rs.ruffle.Ruffle.svg package/extras

          # We must enter the package/ directory in order to create a flat tarball (i.e. without a directory in it).
          cd package
          tar -czvf ../${{ env.PACKAGE_FILE }} *
      

      - name: Upload package
        if: runner.os != 'macOS'
        run: gh release upload "${{ needs.create-nightly-release.outputs.tag_name }}" "${{ env.PACKAGE_FILE }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Debugging with tmate
        uses: mxschmitt/action-tmate@v3.19

      - name: Upload macOS build artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_name }}
          path: |
            ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop
            ${{ env.CARGO_BUILD_DIR }}/ruffle_web_safari
            package
